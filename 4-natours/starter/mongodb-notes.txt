shows current database
> db

show all dbs
> show dbs

show collections
> show collections

create or switch db
> use natours-test


get all documents
> db.tours.find()

// CREATE

insert a document
> db.tours.insertMany({javascript_object})
insert many documents
> db.tours.insertMany([{}, {}])

// READ
all:
db.tours.find 

one:
db.tours.find({name: "The Forest Hiker})

price less than 500 AND rating >= 4.8:
db.tours.find({price: {$lte:  500}})
db.tours.find({price: {$lte:  500}, rating: {$gte: 4.8}})


lte: less than or equal
lt: less than
gte, gt

price less than 500 OR rating >= 4.8:

db.tours.find({$or: [{price: {$lte: 500}}, {rating: {$gte: 4.8}}]})

  only output name:
    db.tours.find({$or: [{price: {$lte: 500}}, {rating: {$gte: 4.8}}]}, {name: 1})

// UPDATE

db.tours.updateOne({query object}, {$set: {changed object}})
many: 

db.tours.updateMany({query object}, {$set: {changed object}})

db.tours.updateMany({rating: {$gte: 4.8}, price: {$gte: 500}}, {$set: {premium: true}})

    // REPLACE:

    replaceOne(), replaceMany()

// DELETE
db.tours.deleteMany({rating: {$lte: 4.7}})

    // DELETE all
    db.tours.deleteMany({})


// CONNECT TO REMOTE DB
copy connections sring from cluster

// CONNECT REMOTE DB to APP
use config.env
DATABASE=mongodb+srv://thomas:<PASSWORD>@cluster0.gc7oe.mongodb.net/natours-app?retryWrites=true&w=majority

install mongodb driver: mongoose



// CONNECT LOCAL DB to APP
DATABASE_LOCAL=mongodb://localhost:27017/natours


const mongoose = require('mongoose');

const DB = process.env.DATABASE.replace(
  '<PASSWORD>',
  process.env.DATABASE_PASSWORD
);

mongoose
  // .connect(process.env.DATABASE_LOCAL, {
  .connect(DB, {
    useNewUrlParser: true,
    useCreateIndex: true,
    useFindAndModify: false,
    useUnifiedTopology: true,
  })
  .then(() => {
    // console.log(con.connections);
    console.log('DB connection established');
  });


// Schema
const tourSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'A tour must have a name'],
    unique: true,
  },
  price: {
    type: Number,
    required: [true, 'A tour must have a price'],
  },
  rating: {
    type: Number,
    default: 4.5,
  },
});

// Model
const Tour = mongoose.model('Tour', tourSchema);
